(* Toplevel functionality.  It is preprocessed because it contains
   code dependent on then compiler version. *)

(* Code taken from UTop_main and adapted to the current project. *)

type t = {
  required_values : Longident.t list;
  rewrite : Location.t -> Parsetree.expression -> Parsetree.expression;
  mutable enabled : bool;
}

(* Rewrite rules, indexed by the identifier of the type
   constructor. *)
let rewrite_rules : (Longident.t, t) Hashtbl.t = Hashtbl.create 8

let add key rule = Hashtbl.add rewrite_rules key rule

let set key v =
  try (Hashtbl.find rewrite_rules key).enabled <- v
  with Not_found -> ()

let enable key = set key true
let disable key = set key false

let longident_lwt_main_run =
  Longident.Ldot (Longident.Lident "Lwt_main", "run")

let longident_async_thread_safe_block_on_async_exn =
  Longident.parse "Async.Std.Thread_safe.block_on_async_exn"

let longident_unit =
  Longident.Lident "()"

let with_loc loc str = {
  Location.txt = str;
  Location.loc = loc;
}

#if ocaml_version < (4, 02)
 (* Wrap <expr> into: fun () -> <expr> *)
 let wrap_unit loc e =
   let i = with_loc loc longident_unit in
   let p = {
     Parsetree.ppat_desc = Parsetree.Ppat_construct (i, None, false);
     Parsetree.ppat_loc = loc;
   } in
   {
     Parsetree.pexp_desc = Parsetree.Pexp_function ("", None, [(p, e)]);
     Parsetree.pexp_loc = loc;
   }
#endif

#if ocaml_version >= (4, 03)
 let nolabel = Asttypes.Nolabel
#else
  let nolabel = ""
#endif

let lwt = Longident.Ldot (Longident.Lident "Lwt", "t")

let () =
  (* Rewrite Lwt.t expressions to Lwt_main.run <expr> *)
  let rewrite loc e =
#if ocaml_version < (4, 02)
    { Parsetree.pexp_desc =
        Parsetree.Pexp_apply
          ({ Parsetree.pexp_desc =
              Parsetree.Pexp_ident (with_loc loc longident_lwt_main_run);
             Parsetree.pexp_loc = loc },
           [("", e)])
    ; Parsetree.pexp_loc = loc }
#else
    let open Ast_helper in
    with_default_loc
      loc (fun () ->
        Exp.apply (Exp.ident (with_loc loc longident_lwt_main_run))
          [(nolabel, e)]
      )
#endif
  in
  add lwt { required_values = [longident_lwt_main_run];
            rewrite;
            enabled = false }

let async = Longident.parse "Async_core.Ivar.Deferred.t"

let () =
  let rewrite loc e =
#if ocaml_version < (4, 02)
    { Parsetree.pexp_desc =
        Parsetree.Pexp_apply
          ({ Parsetree.pexp_desc =
              Parsetree.Pexp_ident (with_loc loc longident_async_thread_safe_block_on_async_exn);
             Parsetree.pexp_loc = loc },
           [("", wrap_unit loc e)])
    ; Parsetree.pexp_loc = loc }
#else
    let open Ast_helper in
    let punit = Pat.construct (with_loc loc (Longident.Lident "()")) None in
    with_default_loc
      loc (fun () ->
        Exp.apply
          (Exp.ident (with_loc loc longident_async_thread_safe_block_on_async_exn))
          [(nolabel, Exp.fun_ nolabel None punit e)]
      )
#endif
  in
  let rule = {
    required_values = [longident_async_thread_safe_block_on_async_exn];
    rewrite;
    enabled = false } in
  add async rule;
  add (Longident.parse "Async_kernel.Ivar.Deferred.t") rule

(* Convert a path to a long identifier. *)
let rec longident_of_path path =
  match path with
  | Path.Pident id ->
    Longident.Lident (Ident.name id)
  | Path.Pdot (path, s, _) ->
    Longident.Ldot (longident_of_path path, s)
  | Path.Papply (p1, p2) ->
    Longident.Lapply (longident_of_path p1, longident_of_path p2)

(* Returns the rewrite rule associated to a type, if any. *)
let rec rule_of_type typ =
  match typ.Types.desc with
  | Types.Tlink typ ->
    rule_of_type typ
  | Types.Tconstr (path, _, _) ->
    (match try Some (Env.find_type path !Toploop.toplevel_env)
      with Not_found -> None with
      | Some { Types.type_kind = Types.Type_abstract;
               Types.type_private = Asttypes.Public;
               Types.type_manifest = Some typ } ->
        rule_of_type typ
      | _ ->
        try
          Some (Hashtbl.find rewrite_rules (longident_of_path path))
        with Not_found ->
          None
    )
  | _ ->
    None

(* Returns whether the given path is persistent. *)
let rec is_persistent_path = function
  | Path.Pident id -> Ident.persistent id
  | Path.Pdot (p, _, _) -> is_persistent_path p
  | Path.Papply (_, p) -> is_persistent_path p

(* Check that the given long identifier is present in the environment
   and is persistent. *)
let is_persistent_in_env longident =
  try is_persistent_path
        (fst (Env.lookup_value longident !Toploop.toplevel_env))
  with Not_found ->
    false

#if ocaml_version < (4, 02)
 let rewrite_str_item pstr_item tstr_item =
   match pstr_item, tstr_item.Typedtree.str_desc with
   | ({ Parsetree.pstr_desc = Parsetree.Pstr_eval e;
        Parsetree.pstr_loc = loc },
      Typedtree.Tstr_eval { Typedtree.exp_type = typ }) ->
     (match rule_of_type typ with
     | Some rule ->
       if rule.enabled
         && List.for_all is_persistent_in_env rule.required_values then
         { Parsetree.pstr_desc = Parsetree.Pstr_eval (rule.rewrite loc e);
           Parsetree.pstr_loc = loc }
       else
         pstr_item
     | None ->
       pstr_item
     )
   | _ ->
     pstr_item
#else
 let rewrite_str_item pstr_item tstr_item =
   match pstr_item, tstr_item.Typedtree.str_desc with
   | ({ Parsetree.pstr_desc = Parsetree.Pstr_eval (e, _);
        Parsetree.pstr_loc = loc },
      Typedtree.Tstr_eval ({ Typedtree.exp_type = typ }, _)) ->
     (match rule_of_type typ with
     | Some rule ->
       if rule.enabled
         && List.for_all is_persistent_in_env rule.required_values then
         { Parsetree.pstr_desc =
             Parsetree.Pstr_eval (rule.rewrite loc e, []);
           Parsetree.pstr_loc = loc }
       else
         pstr_item
     | None ->
       pstr_item
     )
   | _ ->
     pstr_item
#endif
;;

let no_output = { Format.
                  out_string = (fun _s _ofs _len -> ());
                  out_flush = (fun () -> ());
                  out_newline = (fun () -> ());
                  out_spaces = (fun _ -> ()) }

let err_output = Format.pp_get_formatter_out_functions Format.err_formatter ()

let rewrite phrase = match phrase with
  | Parsetree.Ptop_def pstr ->
     (* The typing may generate warnings that one does *not* want to
        display. *)
     Format.pp_print_flush Format.err_formatter ();
     Format.pp_set_formatter_out_functions Format.err_formatter no_output;
     (try
         let tstr, _, _ = Typemod.type_structure !Toploop.toplevel_env pstr
                                                 Location.none in
         Format.pp_set_formatter_out_functions Format.err_formatter err_output;
         Parsetree.Ptop_def (List.map2 rewrite_str_item pstr
                                       tstr.Typedtree.str_items)
       with _ ->
         Format.pp_set_formatter_out_functions Format.err_formatter err_output;
         phrase)
  | Parsetree.Ptop_dir _ ->
    (* Directive *)
    phrase
